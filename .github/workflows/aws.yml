name: Deploy to EC2 (Dev & Prod)

on:
  push:
    branches: [ "main" ]

env:
  CONTAINER_NAME: static-resume-container
  APP_PORT: 80
  HEALTH_CHECK_PATH: /
  HEALTH_CHECK_TIMEOUT: 120

jobs:
  validate:
    name: Validate Environment
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.validate.outputs.ready }}
    steps:
    - name: Check required secrets
      id: validate
      run: |
        REQUIRED_SECRETS=("AWS_ACCESS_KEY_ID" "AWS_SECRET_ACCESS_KEY" "AWS_REGION" "DEV_SERVER_IP" "PROD_SERVER_IP" "SSH_PRIVATE_KEY")
        missing=0
        for secret in "${REQUIRED_SECRETS[@]}"; do
          if [ -z "${{ secrets[secret] }}" ]; then
            echo "::error::Missing required secret: $secret"
            missing=$((missing+1))
          fi
        done
        if [ $missing -gt 0 ]; then
          echo "ready=false" >> $GITHUB_OUTPUT
          exit 1
        else
          echo "ready=true" >> $GITHUB_OUTPUT
        fi

  build-and-push:
    name: Build and Push to ECR
    needs: validate
    if: needs.validate.outputs.ready == 'true'
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set image tag
      id: set-tag
      run: echo "tag=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build and push image
      run: |
        docker build -t ${{ steps.login-ecr.outputs.registry }}/static-resume:${{ steps.set-tag.outputs.tag }} .
        docker push ${{ steps.login-ecr.outputs.registry }}/static-resume:${{ steps.set-tag.outputs.tag }}

  deploy-dev:
    name: Deploy to Dev EC2
    needs: [validate, build-and-push]
    if: needs.validate.outputs.ready == 'true'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to Dev EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_SERVER_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "=== Starting Dev Deployment ==="
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          sudo docker stop ${{ env.CONTAINER_NAME }} || true
          sudo docker rm ${{ env.CONTAINER_NAME }} || true
          sudo docker pull ${{ steps.login-ecr.outputs.registry }}/static-resume:${{ needs.build-and-push.outputs.image_tag }}
          sudo docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.APP_PORT }}:80 \
            -e NODE_ENV=development \
            --restart unless-stopped \
            ${{ steps.login-ecr.outputs.registry }}/static-resume:${{ needs.build-and-push.outputs.image_tag }}
          
          echo "Waiting for application to become healthy..."
          timeout ${{ env.HEALTH_CHECK_TIMEOUT }} bash -c \
            'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:${{ env.APP_PORT }}${{ env.HEALTH_CHECK_PATH }})" != "200" ]]; do sleep 5; done' || \
            { echo "::error::Health check failed"; exit 1; }
          
          echo "=== Dev Deployment Complete ==="

  deploy-prod:
    name: Deploy to Prod EC2
    needs: [validate, build-and-push, deploy-dev]
    if: github.ref == 'refs/heads/main' && needs.validate.outputs.ready == 'true'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Deploy to Prod EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_SERVER_IP }}
        username: ec2-user
        key: ${{ secrets.SSH_PRIVATE_KEY }}
        port: 22
        script: |
          echo "=== Starting Prod Deployment ==="
          
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
            sudo docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          
          sudo docker stop ${{ env.CONTAINER_NAME }} || true
          sudo docker rm ${{ env.CONTAINER_NAME }} || true
          sudo docker pull ${{ steps.login-ecr.outputs.registry }}/static-resume:${{ needs.build-and-push.outputs.image_tag }}
          sudo docker run -d \
            --name ${{ env.CONTAINER_NAME }} \
            -p ${{ env.APP_PORT }}:80 \
            -e NODE_ENV=production \
            --restart unless-stopped \
            ${{ steps.login-ecr.outputs.registry }}/static-resume:${{ needs.build-and-push.outputs.image_tag }}
          
          echo "Waiting for application to become healthy..."
          timeout ${{ env.HEALTH_CHECK_TIMEOUT }} bash -c \
            'while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' http://localhost:${{ env.APP_PORT }}${{ env.HEALTH_CHECK_PATH }})" != "200" ]]; do sleep 5; done' || \
            { echo "::error::Health check failed"; exit 1; }
          
          echo "=== Prod Deployment Complete ==="