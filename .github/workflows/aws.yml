name: Deploy to EC2 (Dev & Prod)

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: static-resume
  CONTAINER_NAME: static-resume-container
  APP_PORT: 80

permissions:
  contents: read

jobs:
  build-and-push:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    outputs:
      image_tag: ${{ steps.set-tag.outputs.tag }}
      # No image_uri output since it contains secrets
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set image tag
      id: set-tag
      run: |
        TAG=$(git rev-parse --short HEAD)
        if [ -z "$TAG" ]; then
          TAG="latest"
        fi
        echo "Using tag: $TAG"
        echo "tag=$TAG" >> $GITHUB_OUTPUT

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      with:
        mask-password: 'true'

    - name: Build and push image
      run: |
        echo "Building Docker image..."
        docker build -t ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.tag }} .
        
        echo "Pushing to ECR..."
        docker push ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.set-tag.outputs.tag }}

    - name: Upload deployment script
      uses: actions/upload-artifact@v4
      with:
        name: deploy-script
        path: deploy-container.sh

  deploy-dev:
    name: Deploy to Dev EC2
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Download deployment script
      uses: actions/download-artifact@v4
      with:
        name: deploy-script

    - name: Make script executable
      run: chmod +x deploy-container.sh

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to Dev EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEV_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.DEV_EC2_SSH_KEY }}
        script: |
          echo "=== Starting Dev Deployment ==="
          
          # Get ECR registry URL from build job
          REGISTRY=$(echo "${{ steps.login-ecr.outputs.registry }}" | cut -d'/' -f1)
          FULL_IMAGE="$REGISTRY/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}"
          
          # Execute deployment script
          sudo ./deploy-container.sh \
            "$FULL_IMAGE" \
            "${{ needs.build-and-push.outputs.image_tag }}" \
            "development" \
            "${{ env.APP_PORT }}"
          
          echo "=== Dev Deployment Complete ==="

  deploy-prod:
    name: Deploy to Prod EC2
    needs: [build-and-push, deploy-dev]
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Download deployment script
      uses: actions/download-artifact@v4
      with:
        name: deploy-script

    - name: Make script executable
      run: chmod +x deploy-container.sh

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Verify Dev deployment
      run: |
        echo "Verifying Dev deployment before proceeding to Prod..."
        # Add health check command here if needed

    - name: Deploy to Prod EC2
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.PROD_EC2_HOST }}
        username: ec2-user
        key: ${{ secrets.PROD_EC2_SSH_KEY }}
        script: |
          echo "=== Starting Prod Deployment ==="
          
          # Get ECR registry URL from build job
          REGISTRY=$(echo "${{ steps.login-ecr.outputs.registry }}" | cut -d'/' -f1)
          FULL_IMAGE="$REGISTRY/${{ env.ECR_REPOSITORY }}:${{ needs.build-and-push.outputs.image_tag }}"
          
          # Execute deployment script
          sudo ./deploy-container.sh \
            "$FULL_IMAGE" \
            "${{ needs.build-and-push.outputs.image_tag }}" \
            "production" \
            "${{ env.APP_PORT }}"
          
          echo "=== Prod Deployment Complete ==="